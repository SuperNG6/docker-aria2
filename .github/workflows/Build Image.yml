# 工作流名称
name: 构建 Aria2 Docker 镜像

# 工作流触发条件
on:
  # 当代码推送到 main 分支时触发
  push:
    branches:
      - main # 请确保这是你的默认分支名

  # 允许手动从 GitHub Actions UI 触发
  workflow_dispatch:

# 定义作业
jobs:
  buildx:
    # 作业运行环境
    runs-on: ubuntu-latest
    # 这个作业通常只需要读取代码和推送到 Docker Hub，不需要写回仓库
    # 因此默认的 GITHUB_TOKEN 权限通常足够，无需显式设置 permissions
    # permissions:
    #   packages: write # 如果你需要推送到 GitHub Packages (GHCR)

    # 作业步骤
    steps:
      # 步骤 1: 检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4

      # 步骤 2: 设置 QEMU (用于多平台构建)
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 3: 设置 Docker Buildx (增强的 Docker 构建工具)
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 登录到 Docker Hub
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # 推荐使用 Access Token

      # 步骤 5: 设置版本标签 (使用日期)
      - name: 设置版本标签
        id: set-version # 设置步骤 ID
        run: |
          # 生成 YY-MM-DD 格式的日期标签
          VERSION_TAG=$(date +"%y-%m-%d")

          # 将输出变量写入 $GITHUB_OUTPUT 文件 (替代已弃用的 ::set-output)
          echo "version=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT # 设置状态以便后续条件判断 (虽然这里总是 success)

          # 在日志中打印生成的标签，方便查看
          echo "生成的版本标签: ${VERSION_TAG}"
        shell: bash # 明确指定使用 bash shell

      # 步骤 6: 构建并推送 Docker 镜像
      - name: 构建并推送 Aria2 镜像
        # 使用上一步输出的状态作为条件 (虽然这里总是 true)
        if: steps.set-version.outputs.status == 'success'
        uses: docker/build-push-action@v6 # 使用最新的官方 action
        with:
          context: . # Docker 构建上下文路径 (当前目录)
          file: ./Dockerfile # Dockerfile 文件路径
          platforms: linux/amd64,linux/arm/v7,linux/arm64 # 需要构建的平台架构
          push: true # 推送构建好的镜像
          # 为镜像打上标签：日期版本 和 latest
          tags: |
            superng6/aria2:a2b-stable-${{ steps.set-version.outputs.version }}
            superng6/aria2:a2b-latest
          # 启用 BuildKit 缓存，利用 GitHub Actions 缓存加速后续构建
          cache-from: type=gha
          cache-to: type=gha,mode=max