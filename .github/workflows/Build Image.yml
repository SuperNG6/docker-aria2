name: 构建 Aria2 Docker 镜像

on:
  workflow_dispatch:

env:
  REGISTRY_DOCKER: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: superng6/aria2

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: webui
            dockerfile: ./Dockerfile
            platforms: linux/amd64,linux/arm/v7,linux/arm64
          - flavor: aria2b
            dockerfile: ./DockerfileA2B
            platforms: linux/amd64,linux/arm/v7,linux/arm64
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev-${{ matrix.flavor }}

      - name: 构建并推送 Docker 镜像
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=buildx-${{ matrix.flavor }}
          cache-to: type=gha,mode=max,scope=buildx-${{ matrix.flavor }}

      - name: 检查双仓库的最终镜像
        if: always()
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_DOCKER }}/${{ env.IMAGE_NAME }}:dev-${{ matrix.flavor }}
          docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:dev-${{ matrix.flavor }}
          
      - name: 生成构建摘要
        run: |
          echo "## 🐳 Docker 镜像构建完成 - ${{ matrix.flavor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 详情 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| **镜像变体** | \`${{ matrix.flavor }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Dockerfile** | \`${{ matrix.dockerfile }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **支持架构** | \`${{ matrix.platforms }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **镜像标签** | \`dev-${{ matrix.flavor }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **镜像摘要** | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 开发者信息" >> $GITHUB_STEP_SUMMARY
          echo "- **构建时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Git 提交**: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **分支**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **触发方式**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY